plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.asciidoctor.convert" version "2.4.0"
	id 'jacoco'
}

group = 'com.likelion'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

// jacoco version
// jacoco plugin 순서 : test -> jacocoTestReport -> jacocoTestCoverageVerification
jacoco{
	toolVersion= '0.8.7'
}

// jacocoTestReports Task setting
// 테스트 결과를 리포트 파일로 저장하는 jacocoTestReports Task의 설정
jacocoTestReport{
	reports{
		html.enabled true
		html.destination file('${buildDir}/jacocoHTML.html')
		csv.enabled false
		xml.enabled false
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

// jacocoTestCoverageVerification Task Setting
// 원하는 코드 커버리지를 설정하고 커버리지 만족여부를 확인하는 설정
// 최소 커버리지 수준을 설정하고, 통과하지 못할 경우 Task가 실패한다
jacocoTestCoverageVerification{
	violationRules{
		rule{
			enabled= true
			element= 'CLASS'

			// 라인 커버리지 제한을 80% 로 설정
			limit{
				counter= 'LINE'
				value= 'COVEREDRATIO'
				minimum= 0.80
			}

			// 제외할 클래스 지정
			excludes= []
		}
	}
}


/**
 * build dir 하단에 dir와 파일을 빌드하기 전에 미리 구성해둔다.
 */
ext{
	set('snippetsDir', file("build/generated-snippets"))
	set('outputDir', file("build/generated-docs"))
	set('docsDir',file("docs"))
}

test{
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

/**
 * gradle build 시, test -> asciidoctor -> copyRestDocs -> bootJar 순으로 진행
 */

asciidoctor{
	inputs.dir snippetsDir
	dependsOn test
}

task copyRestDocs(type: Copy) {
	dependsOn asciidoctor
	from "${asciidoctor.outputDir}/html5"
	into "${sourceSets.main.output.resourcesDir}/static/docs"
	from "${asciidoctor.outputDir}/html5"
	into "${docsDir}"
	rename{
		String fileName->
			fileName.replace("index.html","ApiDocs.html")
	}
}
/**
 * gradle build 시, asciidoctor -> bootJar 순으로 진행
 * 또한 gradle build 시, ./build/asciidoc/html5 에 HTML 파일 생성하며
 * 이 파일을 /static/docs 로 복사
 */
bootJar{
	dependsOn copyRestDocs
}

dependencies {

	// for spring web develop
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'

	// for I/O
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// for DB connection
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'

	// for security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-root:0.11.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// for RestDocs
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.5.RELEASE'
	testImplementation group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc', version: '2.0.5.RELEASE'
}


sourceSets {
	main {
		java {
			srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
		}
	}
}
